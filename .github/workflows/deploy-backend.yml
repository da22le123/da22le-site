name: Build & Push Backend

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'       # only trigger when backend code changes
    workflow_dispatch:     # ← manual trigger from the Actions tab

permissions:
  contents: read       # you only need to read the repo
  packages: write      # we need to publish to GHCR

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          file: ./backend/Dockerfile 
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/backend:latest

      - name: Cache cloudflared
        uses: actions/cache@v3
        with:
          # store the directory where we’ll put cloudflared
          path: ~/.cloudflared
          # bump this key if you ever want to force a fresh download
          key: cloudflared-${{ runner.os }}-v1

      - name: Install cloudflared (if missing)
        run: |
          mkdir -p ~/.cloudflared
          if [ ! -x ~/.cloudflared/cloudflared ]; then
            echo "Downloading cloudflared…"
            curl -L \
              https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 \
              -o ~/.cloudflared/cloudflared
            chmod +x ~/.cloudflared/cloudflared
          else
            echo "Using cached cloudflared."
          fi
          # add it to PATH
          echo "$HOME/.cloudflared" >> $GITHUB_PATH

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Configure SSH to use Cloudflare tunnel
        run: |
          mkdir -p ~/.ssh
          cat <<EOF >> ~/.ssh/config
          Host ${{ secrets.HOST }}
            User ${{ secrets.USER }}
            ProxyCommand ~/.cloudflared/cloudflared access ssh --hostname %h
            StrictHostKeyChecking no
          EOF
          chmod 600 ~/.ssh/config

      - name: Deploy to server
        env:
          HOST: ${{ secrets.HOST }}
          USER: ${{ secrets.USER }}
          IMAGE: ghcr.io/${{ github.repository_owner }}/backend:latest
          GITHUB_USER: ${{ github.repository_owner }}
          GITHUB_PAT: ${{ secrets.PAT }}
        run: |
          ssh -o StrictHostKeyChecking=no $USER@$HOST << EOF
            set -eux
            export GHCR_PAT=$GITHUB_PAT
            echo \$GHCR_PAT | docker login ghcr.io \
              --username $GITHUB_USER --password-stdin

            cd /home/da22le/hosted

            # pull the fresh image
            docker pull $IMAGE

            # recreate only the backend service
            docker-compose up -d --no-deps da22le-site-backend

            # clean up old, untagged images
            docker image prune -f
          EOF